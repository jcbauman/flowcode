{"version":3,"sources":["css/flowPageExplorer.module.css","css/flowPageExpanded.module.css","config/helperMethods.tsx","components/FlowPageCard.tsx","components/FlowPageExplorer.tsx","components/FlowPageExpanded.tsx","App.tsx","serviceWorker.ts","index.tsx","css/flowPage.module.css"],"names":["module","exports","getBackgroundColor","theme","backgroundColor","filterConfig","title","filterString","getColorHSL","h","s","color","rgb","substring","length","replace","split","r","parseFloat","g","b","max","Math","min","l","d","hue","saturation","lightness","FlowPageCard","props","pageData","page","pages","to","process","slugName","className","styles","cardContainer","style","textDark","textLight","displayName","profileImage","profileImageShapeType","profileImageCircle","profileImageSquare","src","alt","FlowPageExplorer","trendingPages","useState","filter","setFilter","flowExplorer","filterContainer","map","filterSet","filterButton","filterButtonSelected","onClick","pageContainer","category","FlowPageExpanded","slug","console","log","justCopied","setJustCopied","filteredPages","undefined","useEffect","setTimeout","expandedPage","caption","share","shareButtonCopied","shareButton","aux","document","createElement","setAttribute","shortUrl","body","appendChild","select","execCommand","removeChild","copySharingLink","shareButtonText","links","linkData","linkItem","linkItemDark","linkItemLight","window","open","actionData","link","thumbNailImgUrl","linkIconImage","linkText","App","setTrendingPages","pageSlugs","setPageSlugs","fetch","then","response","json","catch","error","slugs","path","exact","render","location","pathname","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.648d9c10.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"flowExplorer\":\"flowPageExplorer_flowExplorer__1SpId\",\"filterContainer\":\"flowPageExplorer_filterContainer__1A6oB\",\"filterButton\":\"flowPageExplorer_filterButton__3Wmqp\",\"filterButtonSelected\":\"flowPageExplorer_filterButtonSelected__w9lH1\",\"pageContainer\":\"flowPageExplorer_pageContainer__23xjY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"expandedPage\":\"flowPageExpanded_expandedPage__3x3qb\",\"linkItem\":\"flowPageExpanded_linkItem__1Pfqn\",\"linkIconImage\":\"flowPageExpanded_linkIconImage__1P4BH\",\"linkText\":\"flowPageExpanded_linkText__1K28v\",\"profileImage\":\"flowPageExpanded_profileImage__OKak-\",\"profileImageCircle\":\"flowPageExpanded_profileImageCircle__atk0u\",\"profileImageSquare\":\"flowPageExpanded_profileImageSquare__ppGWU\",\"textDark\":\"flowPageExpanded_textDark__14s5n\",\"textLight\":\"flowPageExpanded_textLight__3S317\",\"linkItemDark\":\"flowPageExpanded_linkItemDark__Wzj9L\",\"linkItemLight\":\"flowPageExpanded_linkItemLight__1oEAs\",\"shareButton\":\"flowPageExpanded_shareButton__2HbBi\",\"shareButtonText\":\"flowPageExpanded_shareButtonText__18ain\",\"shareButtonCopied\":\"flowPageExpanded_shareButtonCopied__29hRL\"};","import {FlowPageTheme} from \"../types/interfaces\";\n\n//modifier for style based on theme\nexport const getBackgroundColor = (theme:FlowPageTheme) => {\n        if(theme) {\n            return {backgroundColor: theme.backgroundColor};\n        }\n        return;\n    };\n\n//constant for filter list\nexport const filterConfig : Array<{title:string,filterString:string}> = [{title:'All',filterString:''},{title:'Writers',filterString:'writer'},{title:'Athletes',filterString:'athlete'},{title:'Influencers',filterString:'influencer'}];\n\n//returns hsl theme for rbg color item\n//use for determining text color\nexport const getColorHSL = (theme:FlowPageTheme) => {\n  let color = theme.backgroundColor;\n\n  let rgb = color.substring(4, color.length-1)\n         .replace(/ /g, '')\n         .split(',');\n\n\n  let r = parseFloat(rgb[0]) / 255;\n  let g = parseFloat(rgb[1]) / 255;\n  let b = parseFloat(rgb[2]) / 255;\n\n  var max = Math.max(r, g, b), min = Math.min(r, g, b);\n  var h, s, l = (max + min) / 2;\n\n  if (max === min) {\n    h = s = 0; // achromatic\n  } else {\n    var d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n    switch (max) {\n      case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n      case g: h = (b - r) / d + 2; break;\n      case b: h = (r - g) / d + 4; break;\n    }\n\n      if(h) h /= 6;\n  }\n\n  return { hue:h, saturation:s, lightness:l };\n\n}","import React from 'react';\nimport {Page} from \"../types/interfaces\";\nimport {Link} from 'react-router-dom';\nimport {getBackgroundColor, getColorHSL} from '../config/helperMethods';\nimport styles from '../css/flowPage.module.css';\n\ninterface FlowPageCardProps{\n    page:Page;\n}\n\nexport default function FlowPageCard(props:FlowPageCardProps){\n    const {page} = props;\n    const pageData = (page || {pages:[]}).pages[0] || {};\n    return (\n        <Link to={`${process.env.PUBLIC_URL}/${pageData.slugName}`} className={styles.cardContainer}\n              style={getBackgroundColor(pageData.theme)}>\n            <h4 className={getColorHSL(pageData.theme).lightness > 0.6 ? styles.textDark: styles.textLight}>{pageData.displayName}</h4>\n            <img\n                className={`${styles.profileImage} ${pageData.theme.profileImageShapeType === 'circle' ? styles.profileImageCircle : styles.profileImageSquare}`}\n                src={pageData.profileImage} alt={`${pageData.displayName}'s Profile`}/>\n        </Link>\n    );\n\n}","import React, {useState} from 'react';\nimport {Page} from \"../types/interfaces\";\nimport {FlowPageCard} from \"./index\";\nimport {filterConfig} from \"../config/helperMethods\";\nimport styles from '../css/flowPageExplorer.module.css';\n\n\nexport interface FlowPageExplorerProps{\n    trendingPages:Array<Page>;\n}\n\nexport default function FlowPageExplorer(props:FlowPageExplorerProps) {\n    const {trendingPages} = props;\n    const [filter,setFilter] = useState<string>('');\n\n    //filter by selected category\n    const filteredPages = (filterString: string) => {\n        if(filterString === ''){\n            return trendingPages;\n        } else {\n            return trendingPages.filter((page:Page) => page.category === filterString);\n        }\n    };\n\n    return(\n        <div className={styles.flowExplorer}>\n            <div className={styles.filterContainer}>\n                {filterConfig.map((filterSet:{title:string,\n                    filterString:string}) =>\n                    <p className={`${styles.filterButton} ${filter === filterSet.filterString ? styles.filterButtonSelected : ''}`} onClick={() => setFilter(filterSet.filterString)}>\n                        {filterSet.title}\n                    </p>\n                )}\n            </div>\n            <div className={styles.pageContainer}>\n                {filteredPages(filter).map((page:Page) =>\n                    <FlowPageCard page={page}/>\n                )}\n            </div>\n        </div>\n    )\n}","import React, {useState, useEffect} from 'react';\nimport {FlowPage, FlowPageLink, Page} from \"../types/interfaces\";\nimport {getBackgroundColor, getColorHSL} from '../config/helperMethods';\nimport styles from '../css/flowPageExpanded.module.css';\n\ninterface FlowPageExpandedProps{\n    slug:string;\n    trendingPages:Array<Page>;\n}\n\nexport default function FlowPageExpanded(props:FlowPageExpandedProps){\n    const {slug,trendingPages} = props;\n\n    console.log(slug);\n\n    //for storing sharable link copying state\n    const [justCopied,setJustCopied] = useState(false);\n\n    // filter page based on pathname slug\n    let filteredPages = trendingPages.filter((page:Page) => {\n        return '/'+ page.pages[0].slugName === slug});\n\n    const pageData:FlowPage | undefined = filteredPages[0] ? filteredPages[0].pages[0] : undefined;\n\n    //copy sharing link onClick\n    const copySharingLink = () => {\n        var aux = document.createElement(\"input\");\n        aux.setAttribute(\"value\", (pageData || {shortUrl:''}).shortUrl);\n        document.body.appendChild(aux);\n        aux.select();\n        document.execCommand(\"copy\");\n        document.body.removeChild(aux);\n        setJustCopied(true);\n    };\n\n    //adjust sharable link copying UI after ~1 second\n    useEffect(() => {\n        if(justCopied) {\n            setTimeout(function () {\n                setJustCopied(false);\n            }, 1200);\n        }\n    },[justCopied])\n\n    if(pageData) {\n        return (\n            <div className={styles.expandedPage}\n                 style={getBackgroundColor(pageData.theme)}>\n                <h2 className={getColorHSL(pageData.theme).lightness > 0.6 ? styles.textDark: styles.textLight}>\n                    {pageData.displayName}\n                </h2>\n                <img\n                    className={`${styles.profileImage} ${pageData.theme.profileImageShapeType === 'circle' ? styles.profileImageCircle : styles.profileImageSquare}`}\n                    src={pageData.profileImage} alt={`${pageData.displayName}'s Profile`}/>\n                <h5 className={getColorHSL(pageData.theme).lightness > 0.6 ? styles.textDark: styles.textLight}>\n                    {pageData.caption || ''}\n                </h5>\n                {pageData.share ?\n                    <div className={!justCopied ? styles.shareButton : styles.shareButtonCopied} onClick={() => copySharingLink()}>\n                        <p className={styles.shareButtonText}>{!justCopied ? 'Share' : 'Copied!'}</p>\n\n                    </div>: ''}\n                {pageData.links.map((linkData: FlowPageLink) => (\n                        <div className={`${styles.linkItem} ${getColorHSL(pageData.theme).lightness > 0.6 ? styles.linkItemDark: styles.linkItemLight}`}\n                             onClick={() => window.open(linkData.actionData.link, '_blank')}>\n                            {linkData.thumbNailImgUrl ? <img className={styles.linkIconImage} src={linkData.thumbNailImgUrl} alt={''}/> : ''}\n                            <h5 className={styles.linkText}>{linkData.title}</h5>\n                        </div>\n                    )\n                )}\n            </div>\n        );\n    } else {\n        return (\n            <div className={styles.expandedPage}>\n                <h3>Loading...</h3>\n            </div>\n        );\n    }\n\n}","import React, {useEffect, useState} from 'react';\nimport {Switch} from 'react-router';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport {Page} from \"./types/interfaces\";\nimport {FlowPageExpanded, FlowPageExplorer} from \"./components\";\n\n\nconst App: React.FC = () => {\n\n    const [trendingPages,setTrendingPages] = useState<Array<Page>>([]);\n    const [pageSlugs, setPageSlugs] = useState<Array<string>>([]);\n    const GET_PAGES_ENDPOINT =  'https://dtxsharedprodcdn2.blob.core.windows.net/random/flowpages-mock-data.json';\n\n    //get data from pages endpoint\n    useEffect(  () => {\n        fetch(GET_PAGES_ENDPOINT)\n            .then(response => response.json())\n            .then(response => setTrendingPages((response || {pages:[]}).pages))\n            .catch(error => console.log(error));\n    },[]);\n\n    //process array of available slugs for Router\n    useEffect( () => {\n        let slugs = trendingPages.map((page:Page) => {\n            return process.env.PUBLIC_URL + '/' + page.pages[0].slugName;\n        });\n        setPageSlugs(slugs);\n    },[trendingPages]);\n\n\n    return (\n        <Router>\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <Switch>\n                        <Route path={process.env.PUBLIC_URL + '/'} exact render={() => (<FlowPageExplorer trendingPages={trendingPages}/>) }/>} />\n                        <Route path={pageSlugs} render={() => <FlowPageExpanded slug={window.location.pathname} trendingPages={trendingPages}/> } />\n                    </Switch>\n                </header>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardContainer\":\"flowPage_cardContainer__16uLH\",\"profileImage\":\"flowPage_profileImage__2uZ5G\",\"profileImageCircle\":\"flowPage_profileImageCircle__UtLQI\",\"profileImageSquare\":\"flowPage_profileImageSquare__1wUAh\",\"textDark\":\"flowPage_textDark__1h7BY\",\"textLight\":\"flowPage_textLight__1hKwP\"};"],"sourceRoot":""}